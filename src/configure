#! /bin/bash
###########################################################################
##                                                                       ##
##                              OByteLib                                 ##
##                                                                       ##
##                            Benoit Vaugon                              ##
##                                                                       ##
##    This file is distributed under the terms of the CeCILL license.    ##
##    See file LICENSE-en.                                               ##
##                                                                       ##
###########################################################################
###

OCAMLRUN="$(ocamlc -where)/../../bin/ocamlrun"
MAX_PRIM_ARITY=5

PRIMS=$($OCAMLRUN -p |
  grep -v caml_spacetime_only_works_for_native_code |
  grep -v caml_register_code_fragment |
  grep -v caml_get_current_environment |
  grep -v caml_ensure_stack_capacity |
  grep -v caml_sys_argv)

echo "\
include Strsec.Make(struct let section = Section.PRIM end)
" > prim.ml

for prim in $PRIMS; do
    for ((i=1; i <= MAX_PRIM_ARITY; i++)); do
        echo -n "external ${prim}_$i : 'a" >> prim.ml
        for ((j = 1; j <= i; j ++)); do
            echo -n " -> 'a" >> prim.ml
        done
        echo " = \"$prim\"" >> prim.ml
    done
    echo >> prim.ml
done

echo "\

let find_prim arity name =
  match arity, name with" >> prim.ml

for prim in $PRIMS; do
    if [ "$prim" != "caml_ensure_stack_capacity" -a "$prim" != "caml_is_printable" ]; then
        for ((i=1; i <= MAX_PRIM_ARITY; i++)); do
            echo "  | $i, \"$prim\" -> Obj.repr ${prim}_$i" >> prim.ml
        done
        echo >> prim.ml
    fi
done

echo "\
  | 1, \"caml_ensure_stack_capacity\" -> Obj.repr (fun _ -> ())
  | 1, \"caml_is_printable\" -> Obj.repr (fun _ -> true)
  | 1, \"caml_sys_argv\" -> Obj.repr (fun _ -> Sys.argv)

  | _ -> Fmt.failwith \"external function %S of arity %d not found\" name arity

let apply narg cfun arg0 stack =
  let open Astack in
  let rec f narg cfun arg0 stack ofs =
    match narg with
    | 1 ->
      (Obj.obj cfun : Obj.t -> Obj.t) arg0
    | 2 ->
      (Obj.obj cfun : Obj.t -> Obj.t -> Obj.t) arg0 (acc stack ofs)
    | 3 ->
      (Obj.obj cfun : Obj.t -> Obj.t -> Obj.t -> Obj.t) arg0 (acc stack ofs)
        (acc stack (ofs + 1))
    | 4 ->
      (Obj.obj cfun : Obj.t -> Obj.t -> Obj.t -> Obj.t -> Obj.t) arg0
        (acc stack ofs) (acc stack (ofs + 1)) (acc stack (ofs + 2))
    | 5 ->
      (Obj.obj cfun : Obj.t -> Obj.t -> Obj.t -> Obj.t -> Obj.t -> Obj.t)
        arg0 (acc stack ofs) (acc stack (ofs + 1)) (acc stack (ofs + 2))
        (acc stack (ofs + 3))
    | _ ->
      f (narg - 5) (f 5 cfun arg0 stack ofs) (acc stack (ofs + 4)) stack
        (ofs + 5) in
  f narg cfun arg0 stack 0" >> prim.ml
